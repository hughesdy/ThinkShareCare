req(input$file)
# Collect the selected variables
selected_vars <- sapply(1:field_count(), function(i) {
input[[paste0("var", i)]]
})
# Print the selected variables for demonstration
print(selected_vars)
# Here you can add code to process the selected variables
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title
titlePanel("Contributor Data Upload and Variable Selection Tool"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Your Data in .csv format", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
mainPanel(
tableOutput("uploadedData")
)
)
)
# Define server logic for the app
server <- function(input, output, session) {
# Reactive value to store the number of input fields
field_count <- reactiveVal(0)
# Reactive value to store the data frame
df <- reactiveVal(NULL)
# Render the dynamic inputs
output$dynamic_inputs <- renderUI({
fields <- lapply(1:field_count(), function(i) {
selectizeInput(paste0("var", i), label = paste("Variable", i),
choices = c("Select Variable" = "", possible_vars),
options = list(create = FALSE),
selected = "")
})
do.call(tagList, fields)
})
# Add new field
observeEvent(input$addField, {
current_count <- field_count()
if (current_count < 100) {
field_count(current_count + 1)
}
})
# Load and validate data when a file is uploaded
observe({
req(input$file)
tryCatch({
uploaded_df <- read.csv(input$file$datapath)
# Check that the first row contains characters
if (!all(sapply(uploaded_df[1,], is.character))) {
output$error_msg <- renderText("Error: The first row must contain character fields.")
df(NULL)  # Reset the data frame
return()
}
# Check that all other rows contain numerical values
if (!all(sapply(uploaded_df[-1,], is.numeric))) {
output$error_msg <- renderText("Error: All other rows must contain numerical values.")
df(NULL)  # Reset the data frame
return()
}
output$error_msg <- renderText("")  # Clear any previous error messages
df(uploaded_df)
output$uploadedData <- renderTable({
head(uploaded_df)
})
}, error = function(e) {
output$error_msg <- renderText(paste("Error reading the file:", e$message))
df(NULL)  # Reset the data frame
})
})
# Handle submit action
observeEvent(input$submit, {
req(df())  # Ensure df is not NULL
# Collect the selected variables
selected_vars <- sapply(1:field_count(), function(i) {
input[[paste0("var", i)]]
})
# Print the selected variables for demonstration
print(selected_vars)
# Here you can add code to process the selected variables
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title
titlePanel("Contributor Data Upload and Variable Selection Tool"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Instructions for file upload
tags$div(
h4("Upload Your Data in .csv format"),
p("Data files must be in .csv format. The first row of the file can contain variable names, while the rest of the data should be numeric."),
fileInput("file", "Choose CSV File", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
# Style for instructions
tags$style(HTML("
.sidebar-panel {
padding: 20px;
}
.instructions {
font-size: 14px;
color: #666;
}
"))
),
mainPanel(
tableOutput("uploadedData")
)
# Load required libraries
library(shiny)
library(shinyjs)
library(shinyWidgets)
setwd("~/Desktop/Neurohack/Project/App")
setwd("~/Desktop/Neurohack/Project/my_shiny_app")
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title
titlePanel("Contributor Data Upload and Variable Selection Tool"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Instructions for file upload
tags$div(
h4("Upload Your Data in .csv format"),
p("Data files must be in .csv format. The first row of the file can contain variable names, while the rest of the data should be numeric."),
fileInput("file", "Choose CSV File", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
# Style for instructions
tags$style(HTML("
.sidebar-panel {
padding: 20px;
}
.instructions {
font-size: 14px;
color: #666;
}
"))
),
mainPanel(
tableOutput("uploadedData")
)
# Load required libraries
library(shiny)
library(shinyjs)
library(shinyWidgets)
setwd("~/Desktop/Neurohack/Project/my_shiny_app")
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title
titlePanel("Contributor Data Upload and Variable Selection Tool"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Your Data in .csv format", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
mainPanel(
tableOutput("uploadedData")
)
)
)
# Define server logic for the app
server <- function(input, output, session) {
# Reactive value to store the number of input fields
field_count <- reactiveVal(0)
# Reactive value to store the data frame
df <- reactiveVal(NULL)
# Render the dynamic inputs
output$dynamic_inputs <- renderUI({
fields <- lapply(1:field_count(), function(i) {
selectizeInput(paste0("var", i), label = paste("Variable", i),
choices = c("Select Variable" = "", possible_vars),
options = list(create = FALSE),
selected = "")
})
do.call(tagList, fields)
})
# Add new field
observeEvent(input$addField, {
current_count <- field_count()
if (current_count < 100) {
field_count(current_count + 1)
}
})
# Load and validate data when a file is uploaded
observe({
req(input$file)
tryCatch({
uploaded_df <- read.csv(input$file$datapath)
# Check that the first row contains characters
if (!all(sapply(uploaded_df[1,], is.character))) {
output$error_msg <- renderText("Error: The first row must contain character fields.")
df(NULL)  # Reset the data frame
return()
}
# Check that all other rows contain numerical values
if (!all(sapply(uploaded_df[-1,], is.numeric))) {
output$error_msg <- renderText("Error: All other rows must contain numerical values.")
df(NULL)  # Reset the data frame
return()
}
output$error_msg <- renderText("")  # Clear any previous error messages
df(uploaded_df)
output$uploadedData <- renderTable({
head(uploaded_df)
})
}, error = function(e) {
output$error_msg <- renderText(paste("Error reading the file:", e$message))
df(NULL)  # Reset the data frame
})
})
# Handle submit action
observeEvent(input$submit, {
req(df())  # Ensure df is not NULL
# Collect the selected variables
selected_vars <- sapply(1:field_count(), function(i) {
input[[paste0("var", i)]]
})
# Print the selected variables for demonstration
print(selected_vars)
# Here you can add code to process the selected variables
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd("~/Desktop/Neurohack/Project/my_shiny_app")
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title
titlePanel("Contributor Data Upload and Variable Selection Tool"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
fileInput("file", "UPLOAD YOU DATA in .csv format with the first row bring variable names, the first column being deidentified IDs, and the rest of the data being numerical values (see data dictionary for guides)", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
mainPanel(
tableOutput("uploadedData")
)
)
)
# Define server logic for the app
server <- function(input, output, session) {
# Reactive value to store the number of input fields
field_count <- reactiveVal(0)
# Reactive value to store the data frame
df <- reactiveVal(NULL)
# Render the dynamic inputs
output$dynamic_inputs <- renderUI({
fields <- lapply(1:field_count(), function(i) {
selectizeInput(paste0("var", i), label = paste("Variable", i),
choices = c("Select Variable" = "", possible_vars),
options = list(create = FALSE),
selected = "")
})
do.call(tagList, fields)
})
# Add new field
observeEvent(input$addField, {
current_count <- field_count()
if (current_count < 100) {
field_count(current_count + 1)
}
})
# Load and validate data when a file is uploaded
observe({
req(input$file)
tryCatch({
uploaded_df <- read.csv(input$file$datapath)
# Check that the first row contains characters
if (!all(sapply(uploaded_df[1,], is.character))) {
output$error_msg <- renderText("Error: The first row must contain character fields.")
df(NULL)  # Reset the data frame
return()
}
# Check that all other rows contain numerical values
if (!all(sapply(uploaded_df[-1,], is.numeric))) {
output$error_msg <- renderText("Error: All other rows must contain numerical values.")
df(NULL)  # Reset the data frame
return()
}
output$error_msg <- renderText("")  # Clear any previous error messages
df(uploaded_df)
output$uploadedData <- renderTable({
head(uploaded_df)
})
}, error = function(e) {
output$error_msg <- renderText(paste("Error reading the file:", e$message))
df(NULL)  # Reset the data frame
})
})
# Handle submit action
observeEvent(input$submit, {
req(df())  # Ensure df is not NULL
# Collect the selected variables
selected_vars <- sapply(1:field_count(), function(i) {
input[[paste0("var", i)]]
})
# Print the selected variables for demonstration
print(selected_vars)
# Here you can add code to process the selected variables
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title
titlePanel("Contributor Data Upload and Variable Selection Tool"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Instructions for file upload
tags$div(
h4("Upload Your Data"),
p("Please search and select the names of your variables in the order they are listed in your dataset. Variable 1 will be ID, and Variable 2 will be the variable listed in the second column of your dataset, and so on."),
p("Data files must be in .csv format. The first row of the file can contain variable names, while the rest of the data should be numeric."),
fileInput("file", "Choose CSV File", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
# Style for instructions
tags$style(HTML("
.sidebar-panel {
padding: 20px;
}
.instructions {
font-size: 14px;
color: #666;
}
"))
),
mainPanel(
tableOutput("uploadedData")
)
# Define UI for the app
ui <- fluidPage(
setwd("~/Desktop/Neurohack/Project/my_shiny_app")
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title and instructions
titlePanel("Contributor Data Upload and Variable Selection Tool"),
sidebarLayout(
sidebarPanel(
# Instructions for file upload
tags$div(
h4("Upload Your Data"),
p("Please search and select the names of your variables in the order they are listed in your dataset. Variable 1 will be ID, and Variable 2 will be the variable listed in the second column of your dataset, and so on."),
p("Data files must be in .csv format. The first row of the file can contain variable names, while the rest of the data should be numeric."),
fileInput("file", "Choose CSV File", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
# Style for instructions
tags$style(HTML("
.sidebar-panel {
padding: 20px;
}
.instructions {
font-size: 14px;
color: #666;
}
"))
),
mainPanel(
tableOutput("uploadedData")
)
# Load required libraries
library(shiny)
library(shinyjs)
library(shinyWidgets)
setwd("~/Desktop/Neurohack/Project/my_shiny_app")
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define the list of possible variables
possible_vars <- c("Age", "Sex", "Gender", "SES", "Education", "Income", "GAD-7", "PHQ-9")
# Define UI for the app
ui <- fluidPage(
# Add the header image at the top
tags$div(
tags$img(src = "ThinkShareCare_Logo.png", class = "header-img"),
style = "text-align: center;"
),
# App title and instructions
titlePanel("Contributor Data Upload and Variable Selection Tool"),
sidebarLayout(
sidebarPanel(
# Instructions for file upload
tags$div(
h4("Upload Your Data"),
p("Please search and select the names of your variables in the order they are listed in your dataset. Variable 1 will be ID, and Variable 2 will be the variable listed in the second column of your dataset, and so on."),
p("Data files must be in .csv format. The first row of the file can contain variable names, while the rest of the data should be numeric."),
fileInput("file", "Choose CSV File", accept = ".csv"),
uiOutput("dynamic_inputs"),
actionButton("addField", "Add New Field"),
actionButton("submit", "Submit"),
textOutput("error_msg")  # Add a text output to display error messages
),
# Style for instructions
tags$style(HTML("
.sidebar-panel {
padding: 20px;
}
.instructions {
font-size: 14px;
color: #666;
}
"))
),
mainPanel(
tableOutput("uploadedData")
)
install.packages(rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='hughesdy', token='0127A4D3953605042D006914D8005622', secret='IEiqIrJw2+M88Y4fdsBh0TcUgM6ub6MYpkFZt2pf')
library(shiny); runApp('Neurohack_2024_Data_Upload_Shiny_App.R')
setwd("~/Documents/github")
ls
runApp('ThinkShareCare/Contributor_App/Neurohack_2024_Data_Upload_Shiny_App.R')
setwd("~/Documents/github/hughesdy/ThinkShareCare/Contributor_App")
setwd("~/Documents/github/ThinkShareCare/Contributor_App")
runApp('Neurohack_2024_Data_Upload_Shiny_App.R')
rsconnect::deployApp()
rlang::last_trace()
