shiny::runApp()
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(rsconnect)
library(aws.s3)
# Set AWS credentials
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAQMEY53X73DF2AD6C",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-west-2")
# Source the UI and server files
source("../Contributor_App/app.R")
setwd("~/Documents/github/ThinkShareCare/Master_App")
setwd("/Documents/github/ThinkShareCare/Master_App")
pwd
setwd("~/Documents/github/ThinkShareCare/Master_App")
library(shiny)
library(shinyjs)
library(shinyWidgets)
library(rsconnect)
library(aws.s3)
# Set AWS credentials
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAQMEY53X73DF2AD6C",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-west-2")
# Source the UI and server files
source("Contributor_App/app.R", local = TRUE)
# Source the UI and server files
source("../Contributor_App/app.R", local = TRUE)
source("../User_App_Updated/app.R", local = TRUE)
# Define UI
ui <- fluidPage(
# Add the header image at the top with a button above aligned to the right
tags$div(
tags$div(
style = "text-align: right; margin-bottom: 10px;",  # Align button to the right and add margin below
downloadButton("downloadDictionary", "Download Variable Dictionary")
),
tags$img(src = "ThinkShareCare_Logo.png", style = "width: 100%; height: auto; max-width: 500px;"),
style = "text-align: center; margin-bottom: 20px;"
),
# Heading and description
tags$h2("What is ThinkShareCare?"),
tags$p("A tool nested within an interactive web app that hosts various linear models updated by the community. The weights (coefficients) from these models are accessible to end users (clinicians) such that users can input their own patient’s characteristics and be returned with a value representing their patient’s predicted outcome. In the long run, specific outcomes would be defined by the community (i.e., depending on what data contributors provide) and could entail treatment outcomes, diagnoses, subtypes of psychiatric disorders, etc. This is not to be used as a definitive diagnostic tool but rather as an additional piece of information to consider within the context of the larger clinical conceptualization."),
# Two large buttons for navigation
fluidRow(
column(6,
actionButton("contributorButton", "CONTRIBUTOR",
style = "width: 100%; height: 100px; font-size: 20px; background-color: #b4e4a4; color: black; border: none; border-radius: 8px;")
),
column(6,
actionButton("userButton", "USER",
style = "width: 100%; height: 100px; font-size: 20px; background-color: #e49cdc; color: black; border: none; border-radius: 8px;")
)
),
# Conditional panels for displaying different UIs
uiOutput("page_ui")
)
# Define server logic
server <- function(input, output, session) {
# Reactive values to track the active panel
reactive_page <- reactiveVal("main")
# Observe button clicks and update the reactive value
observeEvent(input$contributorButton, {
reactive_page("contributor")
})
observeEvent(input$userButton, {
reactive_page("user")
})
# Render UI components based on the active page
output$page_ui <- renderUI({
if (reactive_page() == "contributor") {
# Include the Contributor UI
contributor_ui
} else if (reactive_page() == "user") {
# Include the User UI
user_ui
} else {
# Default content or main page content
NULL
}
})
# Call the appropriate server logic based on the active page
observe({
if (reactive_page() == "contributor") {
callModule(contributor_server, "contributor")
} else if (reactive_page() == "user") {
callModule(user_server, "user")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
# Source the UI and server files
source("../Contributor_App/app.R", local = TRUE)
source("../User_App_Updated/app.R", local = TRUE)
# Set AWS credentials
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAQMEY53X73DF2AD6C",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-west-2")
# Define the paths to the UI and server files
contributor_ui_path <- file.path("..", "Contributor_App", "app.R")
user_ui_path <- file.path("..", "User_App_Updated", "app.R")
# Source the UI and server files
source(contributor_ui_path, local = TRUE)
source(user_ui_path, local = TRUE)
# Define UI
ui <- fluidPage(
# Add the header image at the top with a button above aligned to the right
tags$div(
tags$div(
style = "text-align: right; margin-bottom: 10px;",  # Align button to the right and add margin below
downloadButton("downloadDictionary", "Download Variable Dictionary")
),
tags$img(src = "ThinkShareCare_Logo.png", style = "width: 100%; height: auto; max-width: 500px;"),
style = "text-align: center; margin-bottom: 20px;"
),
# Heading and description
tags$h2("What is ThinkShareCare?"),
tags$p("A tool nested within an interactive web app that hosts various linear models updated by the community. The weights (coefficients) from these models are accessible to end users (clinicians) such that users can input their own patient’s characteristics and be returned with a value representing their patient’s predicted outcome. In the long run, specific outcomes would be defined by the community (i.e., depending on what data contributors provide) and could entail treatment outcomes, diagnoses, subtypes of psychiatric disorders, etc. This is not to be used as a definitive diagnostic tool but rather as an additional piece of information to consider within the context of the larger clinical conceptualization."),
# Two large buttons for navigation
fluidRow(
column(6,
actionButton("contributorButton", "CONTRIBUTOR",
style = "width: 100%; height: 100px; font-size: 20px; background-color: #b4e4a4; color: black; border: none; border-radius: 8px;")
),
column(6,
actionButton("userButton", "USER",
style = "width: 100%; height: 100px; font-size: 20px; background-color: #e49cdc; color: black; border: none; border-radius: 8px;")
)
),
# Conditional panels for displaying different UIs
uiOutput("page_ui")
)
# Define server logic
server <- function(input, output, session) {
# Reactive values to track the active panel
reactive_page <- reactiveVal("main")
# Observe button clicks and update the reactive value
observeEvent(input$contributorButton, {
reactive_page("contributor")
})
observeEvent(input$userButton, {
reactive_page("user")
})
# Render UI components based on the active page
output$page_ui <- renderUI({
if (reactive_page() == "contributor") {
# Include the Contributor UI
contributor_ui
} else if (reactive_page() == "user") {
# Include the User UI
user_ui
} else {
# Default content or main page content
NULL
}
})
# Call the appropriate server logic based on the active page
observe({
if (reactive_page() == "contributor") {
callModule(contributor_server, "contributor")
} else if (reactive_page() == "user") {
callModule(user_server, "user")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
